{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the AI Marketplace","text":"<p>Welcome to the AI Marketplace documentation. This guide will walk you through the process of uploading your AI models and making them available for use on our platform.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to define the input and output types for your model.</li> <li>How to create a FastAPI application to serve your model.</li> <li>How to package your application with Docker.</li> <li>How to upload your model to the AI Marketplace.</li> </ul>"},{"location":"#sections","title":"Sections","text":"<ul> <li>Getting Started</li> <li>Defining Input and Output Types</li> <li>Creating the FastAPI Application</li> <li>Packaging with Docker</li> <li>Uploading Your Model</li> </ul>"},{"location":"#contact","title":"Contact","text":"<p>For any issues or further assistance, please contact our support team at diyaroralbaev@gmail.com.</p> <p>This documentation is designed to make the process of uploading and managing your AI models as smooth as possible. Let's get started!</p>"},{"location":"fastapi_application/","title":"Creating the FastAPI Application","text":"<p>In this section, you will learn how to create a FastAPI application to serve your AI model. We will provide detailed examples for different input and output types.</p>"},{"location":"fastapi_application/#basic-fastapi-application-structure","title":"Basic FastAPI Application Structure","text":"<p>Here is a basic structure for a FastAPI application:</p> <pre><code>from fastapi import FastAPI, File, Form, UploadFile, HTTPException\nfrom pydantic import BaseModel, ValidationError, validator\nfrom typing import List, Optional, Dict, Union\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.post(\"/predict/\")\nasync def predict(input_text: str = Form(...), input_image: UploadFile = File(None)):\n    return {\"input_text\": input_text, \"input_image\": input_image.filename if input_image else None}\n</code></pre>"},{"location":"fastapi_application/#example-text-input-and-text-output","title":"Example: Text Input and Text Output","text":"<p>If your model accepts text as input and returns text as output, you can define your endpoint as follows:</p>"},{"location":"fastapi_application/#input-and-output-types","title":"Input and Output Types","text":"<pre><code>{\n  \"input_types\": [\n    {\n      \"name\": \"input_text\",\n      \"type\": \"text\",\n      \"description\": \"The text input for sentiment analysis\",\n      \"required\": true\n    }\n  ],\n  \"output_types\": [\n    {\n      \"name\": \"output_text\",\n      \"type\": \"text\",\n      \"description\": \"The sentiment analysis result\",\n      \"required\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"fastapi_application/#fastapi-example","title":"FastAPI Example","text":"<pre><code>from fastapi import FastAPI, Form\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n@app.post(\"/predict/\")\nasync def predict(input_text: str = Form(...)):\n    # Example prediction logic\n    output_text = input_text[::-1]  # Reverse the input text\n    return {\"output_text\": output_text}\n</code></pre>"},{"location":"fastapi_application/#example-image-input-and-text-output","title":"Example: Image Input and Text Output","text":"<p>If your model accepts an image as input and returns text as output, your endpoint will look like this:</p>"},{"location":"fastapi_application/#input-and-output-types_1","title":"Input and Output Types","text":"<pre><code>{\n  \"input_types\": [\n    {\n      \"name\": \"input_image\",\n      \"type\": \"image\",\n      \"description\": \"An image input for object detection\",\n      \"required\": true\n    }\n  ],\n  \"output_types\": [\n    {\n      \"name\": \"output_text\",\n      \"type\": \"text\",\n      \"description\": \"Detected objects in the image\",\n      \"required\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"fastapi_application/#fastapi-example_1","title":"FastAPI Example","text":"<pre><code>from fastapi import FastAPI, File, UploadFile\nfrom typing import List\n\napp = FastAPI()\n\n@app.post(\"/predict/\")\nasync def predict(input_image: UploadFile = File(...)):\n    # Example prediction logic\n    output_text = f\"Processed image {input_image.filename}\"\n    return {\"output_text\": output_text}\n</code></pre>"},{"location":"fastapi_application/#example-text-and-image-input-text-output","title":"Example: Text and Image Input, Text Output","text":"<p>If your model accepts both text and image as input and returns text as output, your endpoint will look like this:</p>"},{"location":"fastapi_application/#input-and-output-types_2","title":"Input and Output Types","text":"<pre><code>{\n  \"input_types\": [\n    {\n      \"name\": \"input_text\",\n      \"type\": \"text\",\n      \"description\": \"The text input for context\",\n      \"required\": true\n    },\n    {\n      \"name\": \"input_image\",\n      \"type\": \"image\",\n      \"description\": \"An image input for processing\",\n      \"required\": true\n    }\n  ],\n  \"output_types\": [\n    {\n      \"name\": \"output_text\",\n      \"type\": \"text\",\n      \"description\": \"The result of processing the text and image\",\n      \"required\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"fastapi_application/#fastapi-example_2","title":"FastAPI Example","text":"<pre><code>from fastapi import FastAPI, File, Form, UploadFile\n\napp = FastAPI()\n\n@app.post(\"/predict/\")\nasync def predict(input_text: str = Form(...), input_image: UploadFile = File(...)):\n    # Example prediction logic\n    output_text = f\"Processed text '{input_text}' and image '{input_image.filename}'\"\n    return {\"output_text\": output_text}\n</code></pre>"},{"location":"fastapi_application/#example-text-input-dictionary-output","title":"Example: Text Input, Dictionary Output","text":"<p>If your model accepts text as input and returns a dictionary as output, your endpoint will look like this:</p>"},{"location":"fastapi_application/#input-and-output-types_3","title":"Input and Output Types","text":"<pre><code>{\n  \"input_types\": [\n    {\n      \"name\": \"input_text\",\n      \"type\": \"text\",\n      \"description\": \"The text input for analysis\",\n      \"required\": true\n    }\n  ],\n  \"output_types\": [\n    {\n      \"name\": \"output_dict\",\n      \"type\": \"dictionary\",\n      \"description\": \"The analysis result as a dictionary\",\n      \"required\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"fastapi_application/#fastapi-example_3","title":"FastAPI Example","text":"<pre><code>from fastapi import FastAPI, Form\nfrom typing import Dict\n\napp = FastAPI()\n\n@app.post(\"/predict/\")\nasync def predict(input_text: str = Form(...)):\n    # Example prediction logic\n    output_dict = {\"original_text\": input_text, \"reversed_text\": input_text[::-1]}\n    return {\"output_dict\": output_dict}\n</code></pre>"},{"location":"fastapi_application/#adding-additional-functions","title":"Adding Additional Functions","text":"<p>If your model requires additional functions, include them in separate files within the zip file. Import these functions into your <code>main.py</code>.</p>"},{"location":"fastapi_application/#example-including-additional-functions","title":"Example: Including Additional Functions","text":"<ol> <li>Create a file named <code>utils.py</code> for additional functions.</li> </ol> <pre><code># utils.py\ndef reverse_text(text: str) -&gt; str:\n    return text[::-1]\n</code></pre> <ol> <li>Import and use the function in <code>main.py</code>.</li> </ol> <pre><code>from fastapi import FastAPI, Form\nfrom utils import reverse_text\n\napp = FastAPI()\n\n@app.post(\"/predict/\")\nasync def predict(input_text: str = Form(...)):\n    # Use the additional function\n    output_text = reverse_text(input_text)\n    return {\"output_text\": output_text}\n</code></pre> <ol> <li>Ensure <code>utils.py</code> is included in the zip file along with <code>main.py</code>, <code>Dockerfile</code>, and <code>requirements.txt</code>.</li> </ol> <p>Proceed to the next section: Packaging with Docker</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Welcome to the AI Marketplace! This section will guide you through the initial steps to get started with uploading your AI models.</p>"},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following: - Python 3.9 or higher installed on your local machine. - Basic knowledge of FastAPI and Docker. - Your AI model ready to be served via an API.</p>"},{"location":"getting_started/#overview","title":"Overview","text":"<p>The process of uploading your model involves the following steps: 1. Defining the input and output types. 2. Creating a FastAPI application to serve your model. 3. Packaging your application with Docker. 4. Uploading your model to the AI Marketplace.</p>"},{"location":"getting_started/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<ol> <li> <p>Install Python:    Ensure Python 3.9 or higher is installed on your machine. You can download it from python.org.</p> </li> <li> <p>Install FastAPI:    FastAPI is the web framework we will use to serve your model.</p> </li> </ol> <pre><code>pip install fastapi\n</code></pre> <ol> <li>Install Uvicorn:    Uvicorn is an ASGI server that runs FastAPI applications.</li> </ol> <pre><code>pip install uvicorn\n</code></pre> <ol> <li>Install Docker:    Docker is used to package your application into a container. You can download and install Docker from docker.com.</li> </ol>"},{"location":"getting_started/#creating-your-project-structure","title":"Creating Your Project Structure","text":"<p>Create a new directory for your project and navigate into it:</p> <pre><code>mkdir your_model\ncd your_model\n</code></pre> <p>Inside this directory, you will create the following files: - <code>Dockerfile</code> - <code>main.py</code> - <code>requirements.txt</code></p> <p>If your model requires additional files or functions, ensure they are included in the same directory. For example, if you have a file named <code>utils.py</code> with helper functions, include it here.</p>"},{"location":"getting_started/#example-project-structure","title":"Example Project Structure","text":"<pre><code>your_model/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 utils.py\n</code></pre> <p>We will go into detail about each of these files in the following sections.</p> <p>Proceed to the next section: Defining Input and Output Types</p>"},{"location":"input_output_types/","title":"Defining Input and Output Types","text":"<p>Defining the input and output types for your AI model is a crucial step. This helps users understand how to interact with your model.</p>"},{"location":"input_output_types/#input-types","title":"Input Types","text":"<p>Input types specify the data your model accepts. Each input type should have a name, type, description, and a flag indicating if it is required.</p>"},{"location":"input_output_types/#example","title":"Example","text":"<p>Here is an example of how to define input types in JSON format:</p> <pre><code>{\n  \"input_types\": [\n    {\n      \"name\": \"input_text\",\n      \"type\": \"text\",\n      \"description\": \"An input text\",\n      \"required\": true\n    },\n    {\n      \"name\": \"input_image\",\n      \"type\": \"image\",\n      \"description\": \"An input image\",\n      \"required\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"input_output_types/#detailed-examples","title":"Detailed Examples","text":"<ul> <li>Text Input <pre><code>{\n  \"name\": \"input_text\",\n  \"type\": \"text\",\n  \"description\": \"The text input for sentiment analysis\",\n  \"required\": true\n}\n</code></pre></li> <li>Name: input_text</li> <li>Type: text</li> <li>Description: The text input for sentiment analysis.</li> <li> <p>Required: true</p> </li> <li> <p>Image Input <pre><code>{\n  \"name\": \"input_image\",\n  \"type\": \"image\",\n  \"description\": \"An image input for object detection\",\n  \"required\": false\n}\n</code></pre></p> </li> <li>Name: input_image</li> <li>Type: image</li> <li>Description: An image input for object detection.</li> <li> <p>Required: false</p> </li> <li> <p>Integer Input <pre><code>{\n  \"name\": \"input_number\",\n  \"type\": \"integer\",\n  \"description\": \"An integer input for numerical prediction\",\n  \"required\": true\n}\n</code></pre></p> </li> <li>Name: input_number</li> <li>Type: integer</li> <li>Description: An integer input for numerical prediction.</li> <li> <p>Required: true</p> </li> <li> <p>Boolean Input <pre><code>{\n  \"name\": \"input_flag\",\n  \"type\": \"boolean\",\n  \"description\": \"A boolean input for binary classification\",\n  \"required\": false\n}\n</code></pre></p> </li> <li>Name: input_flag</li> <li>Type: boolean</li> <li>Description: A boolean input for binary classification.</li> <li>Required: false</li> </ul>"},{"location":"input_output_types/#output-types","title":"Output Types","text":"<p>Output types specify the data your model returns. Similar to input types, each output type should have a name, type, description, and a flag indicating if it is required.</p>"},{"location":"input_output_types/#example_1","title":"Example","text":"<p>Here is an example of how to define output types in JSON format:</p> <pre><code>{\n  \"output_types\": [\n    {\n      \"name\": \"output_text\",\n      \"type\": \"text\",\n      \"description\": \"The processed text output\",\n      \"required\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"input_output_types/#detailed-examples_1","title":"Detailed Examples","text":"<ul> <li>Text Output <pre><code>{\n  \"name\": \"output_text\",\n  \"type\": \"text\",\n  \"description\": \"The text output from the sentiment analysis\",\n  \"required\": true\n}\n</code></pre></li> <li>Name: output_text</li> <li>Type: text</li> <li>Description: The text output from the sentiment analysis.</li> <li> <p>Required: true</p> </li> <li> <p>Image Output <pre><code>{\n  \"name\": \"output_image\",\n  \"type\": \"image\",\n  \"description\": \"The processed image with detected objects\",\n  \"required\": true\n}\n</code></pre></p> </li> <li>Name: output_image</li> <li>Type: image</li> <li>Description: The processed image with detected objects.</li> <li> <p>Required: true</p> </li> <li> <p>Float Output <pre><code>{\n  \"name\": \"output_score\",\n  \"type\": \"float\",\n  \"description\": \"The confidence score of the prediction\",\n  \"required\": true\n}\n</code></pre></p> </li> <li>Name: output_score</li> <li>Type: float</li> <li>Description: The confidence score of the prediction.</li> <li> <p>Required: true</p> </li> <li> <p>Dictionary Output <pre><code>{\n  \"name\": \"output_dict\",\n  \"type\": \"dictionary\",\n  \"description\": \"A dictionary containing multiple outputs\",\n  \"required\": true\n}\n</code></pre></p> </li> <li>Name: output_dict</li> <li>Type: dictionary</li> <li>Description: A dictionary containing multiple outputs.</li> <li>Required: true</li> </ul>"},{"location":"input_output_types/#complete-example","title":"Complete Example","text":"<p>Here is a complete example that includes both input and output types:</p> <pre><code>{\n  \"input_types\": [\n    {\n      \"name\": \"input_text\",\n      \"type\": \"text\",\n      \"description\": \"An input text\",\n      \"required\": true\n    },\n    {\n      \"name\": \"input_image\",\n      \"type\": \"image\",\n      \"description\": \"An input image\",\n      \"required\": false\n    }\n  ],\n  \"output_types\": [\n    {\n      \"name\": \"output_text\",\n      \"type\": \"text\",\n      \"description\": \"The processed text output\",\n      \"required\": true\n    }\n  ]\n}\n</code></pre> <p>Proceed to the next section: Creating the FastAPI Application</p>"},{"location":"packaging_with_docker/","title":"Packaging with Docker","text":"<p>In this section, you will learn how to package your FastAPI application with Docker. We will provide detailed instructions and examples to ensure your model is ready for deployment.</p>"},{"location":"packaging_with_docker/#creating-a-dockerfile","title":"Creating a Dockerfile","text":"<p>A Dockerfile is a script that contains a series of commands to create a Docker image. Here\u2019s an example Dockerfile for your FastAPI application:</p> <pre><code>FROM python:3.9-slim\n\n# Set working directory\nWORKDIR /app\n\n# Copy the requirements file and install dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the rest of the application code\nCOPY . .\n\n# Expose the port\nEXPOSE 8000\n\n# Run the FastAPI app with Uvicorn\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"packaging_with_docker/#creating-the-requirements-file","title":"Creating the Requirements File","text":"<p>List all the dependencies required for your application in <code>requirements.txt</code>.</p> <p>Example: <pre><code>fastapi\nuvicorn\npydantic\n</code></pre> Include any additional libraries your model might require.</p>"},{"location":"packaging_with_docker/#testing-your-model-locally","title":"Testing Your Model Locally","text":"<p>Before deploying your model, it\u2019s crucial to test it locally to ensure everything is working correctly. Follow these steps to build and run your Docker container locally:</p> <ol> <li> <p>Navigate to your project directory: <pre><code>cd your_model\n</code></pre></p> </li> <li> <p>Build the Docker image: <pre><code>docker build -t your_model_image .\n</code></pre></p> </li> <li> <p>Run the Docker container: <pre><code>docker run -p 8000:8000 your_model_image\n</code></pre></p> </li> <li> <p>Test your API:    Open your browser or use a tool like <code>curl</code> or Postman to test your API endpoints. For example, navigate to <code>http://localhost:8000/docs</code> to view the automatically generated API documentation provided by FastAPI.</p> </li> </ol>"},{"location":"packaging_with_docker/#example-project-structure","title":"Example Project Structure","text":"<p>Ensure your project directory includes all necessary files: <pre><code>your_model/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 utils.py  # Any additional files your model requires\n</code></pre></p>"},{"location":"packaging_with_docker/#deploying-your-model","title":"Deploying Your Model","text":"<p>Once you have tested your model locally and ensured everything is working, you can proceed to deploy it to the AI Marketplace. Follow these steps:</p> <ol> <li> <p>Zip your project files: <pre><code>zip -r your_model.zip .\n</code></pre></p> </li> <li> <p>Upload the zip file:    Log in to your AI Marketplace account, navigate to the model upload section, and upload your zip file.</p> </li> <li> <p>Provide model details:    Fill in the required details about your model, including input and output types.</p> </li> <li> <p>Deploy your model:    Once uploaded, your model will be automatically launched on the site through Docker.</p> </li> </ol>"},{"location":"packaging_with_docker/#additional-tips","title":"Additional Tips","text":"<ul> <li>Keep your Docker image lightweight: Use a slim base image and avoid unnecessary packages to keep your Docker image small and efficient.</li> <li>Use environment variables: For configuration settings, consider using environment variables to make your application more flexible and secure.</li> </ul> <p>Proceed to the next section: Uploading Your Model</p>"},{"location":"uploading_your_model/","title":"Uploading Your Model","text":"<p>In this section, you will learn how to upload your packaged AI model to the AI Marketplace. Follow these steps to ensure a smooth upload and deployment process.</p>"},{"location":"uploading_your_model/#preparing-your-zip-file","title":"Preparing Your Zip File","text":"<p>Ensure your project directory is correctly structured and includes all necessary files:</p> <pre><code>your_model/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 utils.py  # Any additional files your model requires\n</code></pre> <p>Zip your project files: <pre><code>zip -r your_model.zip .\n</code></pre></p>"},{"location":"uploading_your_model/#uploading-to-the-ai-marketplace","title":"Uploading to the AI Marketplace","text":"<ol> <li> <p>Log in to Your Account:    Log in to your AI Marketplace account. If you do not have an account, you will need to create one.</p> </li> <li> <p>Navigate to the Model Upload Section:    Go to the section of the site where you can upload new models.</p> </li> <li> <p>Upload Your Zip File:    Click the upload button and select your zipped project file (<code>your_model.zip</code>).</p> </li> <li> <p>Provide Model Details:    Fill in the details about your model, including:</p> </li> <li>Model Name: A descriptive name for your model.</li> <li>Description: A detailed description of what your model does.</li> <li>Input Types: Define the input types your model accepts (refer to Defining Input and Output Types).</li> <li> <p>Output Types: Define the output types your model returns (refer to Defining Input and Output Types).</p> </li> <li> <p>Submit for Deployment:    Once you have filled in all the necessary information, submit your model for deployment. The AI Marketplace will handle the rest, automatically launching your model using Docker.</p> </li> </ol>"},{"location":"uploading_your_model/#post-upload-checklist","title":"Post-Upload Checklist","text":"<ul> <li> <p>Test Your Deployed Model:   After your model is deployed, test it to ensure it works correctly in the production environment. Access the API endpoint provided by the AI Marketplace and verify the responses.</p> </li> <li> <p>Monitor Your Model:   Keep an eye on the usage and performance of your model. The AI Marketplace may provide analytics and logs to help you monitor your model.</p> </li> <li> <p>Update Your Model:   If you need to make updates or improvements to your model, repeat the process of packaging and uploading the new version.</p> </li> </ul>"},{"location":"uploading_your_model/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>Upload Issues:   If you encounter issues while uploading your model, ensure your zip file is correctly structured and includes all necessary files.</p> </li> <li> <p>Deployment Failures:   Check the logs provided by the AI Marketplace to identify any errors during deployment. Ensure your Dockerfile and FastAPI application are correctly configured.</p> </li> <li> <p>API Errors:   If your API is not responding as expected, test it locally to debug any issues. Ensure all dependencies are listed in <code>requirements.txt</code> and correctly installed.</p> </li> </ul> <p>This concludes the process of uploading and deploying your model to the AI Marketplace. For any further assistance, please contact our support team.</p>"}]}